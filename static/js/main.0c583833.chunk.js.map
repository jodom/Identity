{"version":3,"sources":["components/Profile.tsx","components/Button.tsx","components/FlexRow.tsx","components/SocialIcon.tsx","components/Identity.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","React","props","name","image","tagline","className","src","url","alt","Button","link","label","target","href","aria-label","FlexRow","children","style","flexRowStyles","display","flexFlow","alignItems","justifyContent","SocialIcon","icon","profileProps","Identity","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAYO,MAAMA,EAAUC,QAAYC,IAAyB,MAClDC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACrB,OACE,sBAAKC,UAAU,UAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMK,QAElC,sBAAKH,UAAU,UAAf,UACE,sBAAMA,UAAU,OAAhB,SAAwBH,IACxB,sBAAMG,UAAU,UAAhB,SAA2BD,a,MCb5B,MAAMK,EAAST,QAAW,EAAGU,OAAMC,WAEtC,qBAAKN,UAAU,SAAf,SACE,mBAAGO,OAAO,SAASC,KAAMH,EAAML,UAAU,cAAcS,aAAYH,EAAnE,SACGA,QCNII,EAAUf,QAAW,EAAGgB,cAC5B,qBAAKC,MAAOC,EAAZ,SAA4BF,MAG/BE,EAAgB,CACpBC,QAAS,OACTC,SAAU,WACVC,WAAY,SACZC,eAAgB,gB,MCLX,MAAMC,EAAavB,QAAW,EAAEY,SAAQY,OAAMb,WAE5C,mBAAGC,OAAO,SAASC,KAAMD,EAAQP,UAAW,eAAiBmB,EAAOV,aAAYH,MCHnFc,EAA6B,CACjCvB,KAAM,eACNC,MAAO,CACLI,IACE,+HACFC,IAAK,mBAEPJ,QAAS,qBAGEsB,EAAW1B,QAAW,IAE/B,sBAAKK,UAAU,WAAf,UACE,cAAC,EAAD,eAAaoB,IACb,eAACV,EAAD,WACE,cAAC,EAAD,CACEH,OAAO,2BACPY,KAAK,eACLb,MAAO,wBAET,cAAC,EAAD,CACEC,OAAO,sCACPY,KAAK,iBACLb,MAAO,0BAET,cAAC,EAAD,CACEC,OAAO,gCACPY,KAAK,gBACLb,MAAM,4BAGV,eAACI,EAAD,WACE,cAAC,EAAD,CAAQL,KAAM,gCAAiCC,MAAO,aACtD,cAAC,EAAD,CAAQD,KAAM,+BAAgCC,MAAO,qBC7BzCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAAcC,SAASC,eAAe,YDmIhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,kB","file":"static/js/main.0c583833.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./Profile.css\";\n\nexport interface ProfileProps {\n  name: string;\n  image: {\n    url: string;\n    alt: string;\n  };\n  tagline: string;\n}\n\nexport const Profile = React.memo((props: ProfileProps) => {\n  const { name, image, tagline } = props;\n  return (\n    <div className=\"profile\">\n      <div className=\"avatar\">\n        <img src={image.url} alt={image.alt} />\n      </div>\n      <div className=\"caption\">\n        <span className=\"name\">{name}</span>\n        <span className=\"tagline\">{tagline}</span>\n      </div>\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport \"./Button.css\";\n\ninterface ButtonProps {\n  link: string;\n  label: string;\n}\n\nexport const Button = React.memo(({ link, label }: ButtonProps) => {\n  return (\n    <div className=\"button\">\n      <a target=\"blank_\" href={link} className=\"button-link\" aria-label={label}>\n        {label}\n      </a>\n    </div>\n  );\n});\n","import * as React from \"react\";\n\ninterface FlexRowProps {\n  children: React.ReactNode[];\n}\n\nexport const FlexRow = React.memo(({ children }: FlexRowProps) => {\n  return <div style={flexRowStyles}>{children}</div>;\n});\n\nconst flexRowStyles = {\n  display: \"flex\",\n  flexFlow: \"row wrap\",\n  alignItems: \"center\",\n  justifyContent: \"space-evenly\",\n};\n","import * as React from \"react\";\nimport \"./SocialIcon.css\";\n\nexport interface IconProps {\n  target: string;\n  icon: string;\n  label: string;\n}\n\nexport const SocialIcon = React.memo(({target, icon, label}: IconProps) => {\n  // eslint-disable-next-line jsx-a11y/anchor-has-content\n  return <a target=\"blank_\" href={target} className={\"social-icon \" + icon}  aria-label={label} />;\n});\n","import * as React from \"react\";\nimport \"./Identity.css\";\n\nimport { Profile, ProfileProps } from \"./Profile\";\nimport { Button } from \"./Button\";\nimport { FlexRow } from \"./FlexRow\";\nimport { SocialIcon } from \"./SocialIcon\";\n\nconst profileProps: ProfileProps = {\n  name: \"Konuko Jodom\",\n  image: {\n    url:\n      \"https://res.cloudinary.com/dzx2hnetf/image/upload/w_1000,ar_1:1,c_fill,g_auto,e_art:hokusai/v1552174621/identity/profile.jpg\",\n    alt: \"profile picture\",\n  },\n  tagline: \"software engineer\",\n};\n\nexport const Identity = React.memo(() => {\n  return (\n    <div className=\"identity\">\n      <Profile {...profileProps} />\n      <FlexRow>\n        <SocialIcon\n          target=\"https://github.com/jodom\"\n          icon=\"fa fa-github\"\n          label={\"Navigates to GitHub\"}\n        />\n        <SocialIcon\n          target=\"https://linkedin.com/in/konukojodom\"\n          icon=\"fa fa-linkedin\"\n          label={\"Navigates to LinkedIn\"}\n        />\n        <SocialIcon\n          target=\"https://twitter.com/@konuko_j\"\n          icon=\"fa fa-twitter\"\n          label=\"Navigates to Twitter\"\n        />\n      </FlexRow>\n      <FlexRow>\n        <Button link={\"https://calendly.com/konuko_j\"} label={\"calendar\"} />\n        <Button link={\"https://medium.com/@konuko_j\"} label={\"writings\"} />\n      </FlexRow>\n    </div>\n  );\n});\n\n// cspell: ignore linkedin\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport { Identity } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Identity />, document.getElementById('wrapper'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}